// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  User
  Admin
}

model User {
  id                   String              @id @default(cuid())
  name                 String?
  hashedPassword       String?
  email                String?             @unique
  emailVerified        DateTime?
  image                String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  sessions             Session[]
  userType             UserType            @default(User)
  favoriteIds          String[]
  Product              Product[]
  Board                Board[]
  ViewdBoardStore      ViewdBoardStore[]
  ViewdProductStore    ViewdProductStore[]
  BoardLikeDisLike     BoardLikeDisLike[]
  accounts             Account[]
  conversations        Conversation[]
  sendMessages         Message[]           @relation("sender")
  receivedMessages     Message[]           @relation("receiver")
  reviews              Review[]
  buyer                Buyer[]
  seller               Seller[]
  averageRating        Float               @default(0)
  averageproductRating Float               @default(0)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Board {
  id               String             @id @default(cuid())
  title            String
  description      String
  category         String             @default("전체")
  userId           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  likes            Int                @default(0)
  dislikes         Int                @default(0)
  views            Int                @default(0)
  ViewdBoardStore  ViewdBoardStore[]
  BoardLikeDisLike BoardLikeDisLike[]
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BoardLikeDisLike {
  id        Int      @id @default(autoincrement())
  type      String // "Likes 또는 DisLikes"
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id])
}

model Product {
  id                String              @id @default(cuid())
  title             String
  description       String
  imageSrc          String[]
  userId            String
  price             Int
  latitude          Float?
  longitude         Float?
  address           String?
  addressDetail     String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  sold              Boolean             @default(false)
  status            String?             @default("판매중")
  views             Int                 @default(0)
  delivery          Boolean             @default(true)
  faceToFace        Boolean             @default(true)
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories        String[]            @default(["1"])
  ViewdProductStore ViewdProductStore[]
  reviews           Review[]
  purchases         Purchase[]
  byers             Buyer[]
  sellers           Seller[]
  reservations      Reservation[]
}

model Review {
  id            String   @id @default(cuid())
  userId        String
  sellerId      String
  productId     String
  title         String
  text          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userRating    Float
  productRating Float
  user          User     @relation(fields: [userId], references: [id])
  product       Product  @relation(fields: [productId], references: [id])
}

model ViewdBoardStore {
  id       String   @id @default(cuid())
  userId   String
  boardId  String
  viewedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  board    Board    @relation(fields: [boardId], references: [id])
}

model ViewdProductStore {
  id        String   @id @default(cuid())
  userId    String
  productId String
  viewedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Conversation {
  id         String    @id @default(cuid())
  name       String?
  senderId   String
  receiverId String
  users      User[]
  messages   Message[]
  createdAt  DateTime  @default(now())
}

model Message {
  id             String       @id @default(cuid())
  text           String?
  image          String?
  senderId       String
  receiverId     String
  conversationId String
  productId      String?      @default("")
  isRead         Boolean      @default(false)
  messageType    String?      @default("text")
  isAccepted     Int?         @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  address        String?      @default("")
  addressDetail  String?      @default("")
  latitude       Float?       @default(0)
  longitude      Float?       @default(0)
  sender         User         @relation(name: "sender", fields: [senderId], references: [id])
  receiver       User         @relation(name: "receiver", fields: [receiverId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Purchase {
  id        String   @id @default(cuid())
  buyerId   String
  sellerId  String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model Reservation {
  id            String    @id @default(cuid())
  buyerName     String    @default("")
  sellerName    String    @default("")
  buyerId       String
  sellerId      String
  productId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  meetTime      DateTime?
  address       String?   @default("")
  addressDetail String?   @default("")
  latitude      Float?    @default(0)
  longitude     Float?    @default(0)
  isAccepted    Boolean   @default(false)
  sellAccept    Boolean   @default(false)
  buyAccept     Boolean   @default(false)
  product       Product   @relation(fields: [productId], references: [id])
}

model Buyer {
  id         String   @id @default(cuid())
  userId     String
  sellerName String   @default("")
  productId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isReviewed Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Seller {
  id        String   @id @default(cuid())
  userId    String
  buyerName String   @default("")
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}
